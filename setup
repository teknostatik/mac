#!/bin/sh

# This script sets up a new Mac with the applications I use regularly and occasionally.
# It's under heavy development right now, and very experimental. Use at your own risk.

echo "    ========================================================================="
echo "    ███╗   ███╗ █████╗  ██████╗    ███████╗███████╗████████╗██╗   ██╗██████╗ "
echo "    ████╗ ████║██╔══██╗██╔════╝    ██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗"
echo "    ██╔████╔██║███████║██║         ███████╗█████╗     ██║   ██║   ██║██████╔╝"
echo "    ██║╚██╔╝██║██╔══██║██║         ╚════██║██╔══╝     ██║   ██║   ██║██╔═══╝ "
echo "    ██║ ╚═╝ ██║██║  ██║╚██████╗    ███████║███████╗   ██║   ╚██████╔╝██║     "
echo "    ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝    ╚══════╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝     "
echo "    ========================================================================="
echo ""
echo "    Welcome to the Mac Setup Script!"
echo ""
echo "    This interactive script will help you set up a new Mac with essential"
echo "    applications and development tools. It uses Homebrew to manage package"
echo "    installations and gives you full control over what gets installed."
echo ""
echo "    What this script does:"
echo "    • Installs Homebrew (if not already present)"
echo "    • Offers essential applications (browsers, editors, terminal tools)"
echo "    • Provides optional applications (creative tools, communication apps)"
echo "    • Sets up helpful command aliases when requested"
echo "    • Handles Apple Silicon compatibility requirements"
echo ""
echo "    You'll be prompted for each application individually, so you can"
echo "    pick and choose exactly what you need for your setup."
echo ""
echo "    ⚠️  Note: This script is experimental. Use at your own risk!"
echo ""
echo "    Press Enter to continue, or Ctrl+C to exit..."
read -r


# Set up Homebrew
# This is required for installing applications and managing packages on macOS.

if ! command -v brew &> /dev/null; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# install the apps I use every day

echo "Essential applications - choose which ones to install:"

if ! brew list --cask firefox &>/dev/null; then
    echo "Install Firefox? (web browser) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask firefox
    fi
else
    echo "Firefox is already installed, skipping..."
fi

if ! brew list --cask visual-studio-code &>/dev/null; then
    echo "Install Visual Studio Code? (code editor/IDE) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask visual-studio-code
    fi
else
    echo "Visual Studio Code is already installed, skipping..."
fi

if ! brew list fastfetch &>/dev/null; then
    echo "Install fastfetch? (system information tool) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install fastfetch
    fi
else
    echo "fastfetch is already installed, skipping..."
fi

if ! brew list byobu &>/dev/null; then
    echo "Install byobu? (terminal multiplexer) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install byobu
    fi
else
    echo "byobu is already installed, skipping..."
fi

if ! brew list htop &>/dev/null; then
    echo "Install htop? (system monitor) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install htop
        # Add alias to make 'top' use htop
        echo "alias top='htop'" >> ~/.zshrc
        echo "Alias added: 'top' will now use htop (restart terminal or run 'source ~/.zshrc' to activate)"
    fi
else
    echo "htop is already installed, skipping..."
fi

if ! brew list --cask spotify &>/dev/null; then
    echo "Install Spotify? (music streaming) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask spotify
    fi
else
    echo "Spotify is already installed, skipping..."
fi

if ! brew list --cask dropbox &>/dev/null; then
    echo "Install Dropbox? (cloud storage) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask dropbox
    fi
else
    echo "Dropbox is already installed, skipping..."
fi

if ! brew list --cask zerotier-one &>/dev/null; then
    echo "Install ZeroTier One? (network virtualization) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask zerotier-one
    fi
else
    echo "ZeroTier One is already installed, skipping..."
fi

if ! brew list --cask vlc &>/dev/null; then
    echo "Install VLC? (media player) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask vlc
    fi
else
    echo "VLC is already installed, skipping..."
fi

if ! brew list --cask caffeine &>/dev/null; then
    echo "Install Caffeine? (prevent display sleep, menu bar app) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask caffeine
    fi
else
    echo "Caffeine is already installed, skipping..."
fi

if ! brew list --cask proton-drive &>/dev/null; then
    echo "Install Proton Drive? (secure cloud storage) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask proton-drive
    fi
else
    echo "Proton Drive is already installed, skipping..."
fi

if ! brew list --cask protonvpn &>/dev/null; then
    echo "Install ProtonVPN? (VPN service) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask protonvpn
    fi
else
    echo "ProtonVPN is already installed, skipping..."
fi

if ! brew list --cask multipass &>/dev/null; then
    echo "Install Multipass? (Ubuntu VM manager) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask multipass
    fi
else
    echo "Multipass is already installed, skipping..."
fi

if ! brew list --cask utm &>/dev/null; then
    echo "Install UTM? (virtual machine host) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask utm
    fi
else
    echo "UTM is already installed, skipping..."
fi

if ! brew list pandoc &>/dev/null; then
    echo "Install Pandoc? (document converter) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install pandoc
    fi
else
    echo "Pandoc is already installed, skipping..."
fi

if ! brew list ripgrep &>/dev/null; then
    echo "Install ripgrep? (fast text search tool) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install ripgrep
    fi
else
    echo "ripgrep is already installed, skipping..."
fi

if ! brew list eza &>/dev/null; then
    echo "Install eza? (modern ls replacement) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install eza
        echo "Would you like to alias 'ls' to 'eza -l'? (y/N)"
        read -r alias_response
        if [ "$alias_response" = "y" ] || [ "$alias_response" = "Y" ] || [ "$alias_response" = "yes" ] || [ "$alias_response" = "Yes" ]; then
            echo "alias ls='eza -l'" >> ~/.zshrc
            echo "Alias added: 'ls' will now use 'eza -l' (restart terminal or run 'source ~/.zshrc' to activate)"
        fi
    fi
else
    echo "eza is already installed, skipping..."
fi

# Ask if user wants to continue with optional apps

echo ""
echo "Would you like to install any optional applications?"
echo "Available options include: GIMP, Audacity, HandBrake,"
echo "Calibre, Zoom, Microsoft Teams, Ungoogled Chromium, Google Chrome, MacTracker,"
echo "Vial, VIA, QMK tools, Last.fm, Ollama, LM Studio, DisplayLink, and more..."
echo ""
echo "Continue with optional applications? (y/N)"
read -r continue_response

if [ "$continue_response" = "y" ] || [ "$continue_response" = "Y" ] || [ "$continue_response" = "yes" ] || [ "$continue_response" = "Yes" ]; then
    # install the apps I use occasionally
    echo "Optional applications - choose which ones to install:"
    // ...existing optional apps code...
else
    echo "Skipping optional applications. Setup complete!"
    exit 0
fi

if ! brew list --cask iterm2 &>/dev/null; then
    echo "Install iTerm2? (terminal emulator) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask iterm2
    fi
else
    echo "iTerm2 is already installed, skipping..."

# install the apps I use occasionally

echo "Optional applications - choose which ones to install:"

if ! brew list --cask gimp &>/dev/null; then
    echo "Install GIMP? (image editor) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask gimp
    fi
else
    echo "GIMP is already installed, skipping..."
fi



if ! brew list --cask audacity &>/dev/null; then
    echo "Install Audacity? (audio editor) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask audacity
    fi
else
    echo "Audacity is already installed, skipping..."
fi

if ! brew list --cask handbrake &>/dev/null; then
    echo "Install HandBrake? (video transcoder) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask handbrake
    fi
else
    echo "HandBrake is already installed, skipping..."
fi

if ! brew list --cask calibre &>/dev/null; then
    echo "Install Calibre? (ebook manager) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask calibre
    fi
else
    echo "Calibre is already installed, skipping..."
fi


if ! brew list --cask google-chrome &>/dev/null; then
    echo "Install Google Chrome? (web browser) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask google-chrome
    fi
else
    echo "Google Chrome is already installed, skipping..."
fi

if ! brew list --cask zoom &>/dev/null; then
    echo "Install Zoom? (video conferencing) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask zoom
    fi
else
    echo "Zoom is already installed, skipping..."
fi

if ! brew list --cask microsoft-teams &>/dev/null; then
    echo "Install Microsoft Teams? (team collaboration) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask microsoft-teams
    fi
else
    echo "Microsoft Teams is already installed, skipping..."
fi

if ! brew list --cask ungoogled-chromium &>/dev/null; then
    echo "Install Ungoogled Chromium? (privacy-focused browser) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask ungoogled-chromium
    fi
else
    echo "Ungoogled Chromium is already installed, skipping..."
fi

if ! brew list --cask mactracker &>/dev/null; then
    echo "Install MacTracker? (Apple device specifications) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask mactracker
    fi
else
    echo "MacTracker is already installed, skipping..."
fi

if ! brew list --cask vial &>/dev/null; then
    echo "Install Vial? (keyboard configuration tool) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        # Check if we're on Apple Silicon and install Rosetta if needed
        if [[ $(uname -m) == "arm64" ]]; then
            echo "Apple Silicon detected. Checking for Rosetta..."
            if ! /usr/bin/pgrep -q oahd; then
                echo "Installing Rosetta 2 (required for Vial on Apple Silicon)..."
                /usr/sbin/softwareupdate --install-rosetta --agree-to-license
            else
                echo "Rosetta 2 is already installed."
            fi
        fi
        brew install --cask vial
    fi
else
    echo "Vial is already installed, skipping..."
fi

if ! brew list --cask via &>/dev/null; then
    echo "Install VIA? (keyboard remapping tool) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        # Check if we're on Apple Silicon and install Rosetta if needed
        if [[ $(uname -m) == "arm64" ]]; then
            echo "Apple Silicon detected. Checking for Rosetta..."
            if ! /usr/bin/pgrep -q oahd; then
                echo "Installing Rosetta 2 (required for VIA on Apple Silicon)..."
                /usr/sbin/softwareupdate --install-rosetta --agree-to-license
            else
                echo "Rosetta 2 is already installed."
            fi
        fi
        brew install --cask via
    fi
else
    echo "VIA is already installed, skipping..."
fi

if ! brew list qmk/qmk/qmk &>/dev/null || ! brew list --cask qmk-toolbox &>/dev/null; then
    echo "Install and set up QMK and QMK Toolbox? (keyboard firmware development) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        if ! brew list qmk/qmk/qmk &>/dev/null; then
            brew install qmk/qmk/qmk
        else
            echo "QMK CLI is already installed..."
        fi
        if ! brew list --cask qmk-toolbox &>/dev/null; then
            brew install --cask qmk-toolbox
        else
            echo "QMK Toolbox is already installed..."
        fi
        qmk setup
    fi
else
    echo "QMK and QMK Toolbox are already installed, skipping..."
fi

if ! brew list --cask lastfm &>/dev/null; then
    echo "Install Last.fm? (music scrobbling) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        # Check if we're on Apple Silicon and install Rosetta if needed
        if [[ $(uname -m) == "arm64" ]]; then
            echo "Apple Silicon detected. Checking for Rosetta..."
            if ! /usr/bin/pgrep -q oahd; then
                echo "Installing Rosetta 2 (required for Last.fm on Apple Silicon)..."
                /usr/sbin/softwareupdate --install-rosetta --agree-to-license
            else
                echo "Rosetta 2 is already installed."
            fi
        fi
        brew install --cask lastfm
    fi
else
    echo "Last.fm is already installed, skipping..."
fi

if ! brew list --cask deskflow &>/dev/null; then
    echo "Install Deskflow? (keyboard/mouse sharing) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        # Check if the deskflow tap is already added
        if ! brew tap | grep -q "deskflow/homebrew-tap"; then
            echo "Adding Deskflow tap..."
            brew tap deskflow/homebrew-tap
        fi
        brew install --cask deskflow
    fi
else
    echo "Deskflow is already installed, skipping..."
fi

# Ollama (local LLM runtime)
if ! brew list ollama &>/dev/null; then
    echo "Install Ollama? (local LLM runtime) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install ollama
        echo "Start Ollama as a background service now? (y/N)"
        read -r svc
        if [ "$svc" = "y" ] || [ "$svc" = "Y" ] || [ "$svc" = "yes" ] || [ "$svc" = "Yes" ]; then
            brew services start ollama
            echo "Ollama service started."
            echo "Download a starter model (llama3)? (y/N)"
            read -r model_response
            if [ "$model_response" = "y" ] || [ "$model_response" = "Y" ] || [ "$model_response" = "yes" ] || [ "$model_response" = "Yes" ]; then
                ollama pull llama3
            fi
        else
            echo "You can start it later with: brew services start ollama"
        fi
    fi
else
    echo "Ollama is already installed, skipping..."
fi

# LM Studio (local model UI)
if ! brew list --cask lm-studio &>/dev/null; then
    echo "Install LM Studio? (local AI model UI) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask lm-studio
        echo "Launch LM Studio now? (y/N)"
        read -r launch
        if [ "$launch" = "y" ] || [ "$launch" = "Y" ] || [ "$launch" = "yes" ] || [ "$launch" = "Yes" ]; then
            open -a "LM Studio"
        fi
    fi
else
    echo "LM Studio is already installed, skipping..."
fi

# DisplayLink Manager (USB display drivers)
if ! brew list --cask displaylink &>/dev/null; then
    echo "Install DisplayLink Manager? (USB display drivers) (y/N)"
    read -r response
    if [ "$response" = "y" ] || [ "$response" = "Y" ] || [ "$response" = "yes" ] || [ "$response" = "Yes" ]; then
        brew install --cask displaylink
        echo "Launch DisplayLink Manager now to grant permissions? (y/N)"
        read -r launch
        if [ "$launch" = "y" ] || [ "$launch" = "Y" ] || [ "$launch" = "yes" ] || [ "$launch" = "Yes" ]; then
            open -a "DisplayLink Manager"
            echo "Note: Grant Screen Recording and Accessibility permissions in System Settings > Privacy & Security."
        fi
    fi
else
    echo "DisplayLink Manager is already installed, skipping..."
fi